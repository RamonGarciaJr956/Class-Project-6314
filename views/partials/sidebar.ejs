<div class="lg:w-1/4">
  <div class="bg-white rounded-lg shadow-lg p-6 sticky top-24">
    <h2 class="text-lg font-bold mb-4">Filters</h2>

    <input oninput="return sidebarSearch(event)" type="text" name="search" placeholder="Search products" class="w-full border-gray-300 border-2 rounded-lg px-3 py-2 mb-4 focus:ring-purple-600">

    <div class="mb-6">
      <h3 class="font-semibold mb-3">Console Type</h3>
      <div id="console-type-list" class="space-y-2">
        <% 
          const consoleTypes = [...new Set(products.map(product => product.consoleType))];
          consoleTypes.forEach((console) => { 
        %>
        <label class="flex items-center">
          <input type="checkbox" name="consoleType" value="<%= console %>" class="rounded border-gray-300 text-purple-600 focus:ring-purple-600">
          <span class="ml-2 text-gray-700"><%= console %></span>
        </label>
        <% }); %>
      </div>
    </div>

    <div class="mb-6">
      <h3 class="font-semibold mb-3">Condition</h3>
      <div id="condition-list" class="space-y-2">
        <% 
        const conditions = [...new Set(products.map(product => product.condition))];
        conditions.forEach((condition) => { 
        %>
        <label class="flex items-center">
          <input type="checkbox" name="condition" value="<%= condition %>" class="rounded border-gray-300 text-purple-600 focus:ring-purple-600">
          <span class="ml-2 text-gray-700"><%= condition %></span>
        </label>
        <% }); %>
      </div>
    </div>

    <button type="button" onclick="return clearFilters()" class="block w-full text-center bg-purple-400 text-white py-2 rounded-lg hover:bg-purple-500 transition-colors duration-300">
      Clear Filters
    </button>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/ejs@3.1.10/ejs.min.js"></script>
  <script>
    function sortProducts(products, sort) {
      return products.sort((a, b) => {
        switch (sort) {
          case 'price-asc':
            return a.price - b.price;
          case 'price-desc':
            return b.price - a.price;
          case 'newest':
            return new Date(b.createdAt) - new Date(a.createdAt);
          case 'best-selling':
            return b.isBestSeller - a.isBestSeller;
          default:
            return b.isBestSeller - a.isBestSeller;
        }
      });
    }

    const consoleTypeList = document.querySelector('#console-type-list');
    const conditionList = document.querySelector('#condition-list');
    let currentSearchController = null;

    async function sidebarSearch() {
      const search = document.querySelector('input[name="search"]').value;
      const productsList = document.querySelector('#products-list');
      const numOfProducts = document.querySelector('#num-of-products');
      const sortSelect = document.querySelector('#sort-select');
      const consoleTypeCheckboxes = document.querySelectorAll('input[name="consoleType"]:checked');
      const conditionCheckboxes = document.querySelectorAll('input[name="condition"]:checked');

      if (currentSearchController) {
        currentSearchController.abort();
      }

      currentSearchController = new AbortController();
      const signal = currentSearchController.signal;

      try {
        const response = await fetch('/api/search?query=' + search, {
          signal
        });
        const data = await response.json();

        let sortedProducts = sortProducts(data.products, sortSelect.value);

        if (consoleTypeCheckboxes.length) {
          const consoleTypes = Array.from(consoleTypeCheckboxes).map(checkbox => checkbox.value);
          sortedProducts = sortedProducts.filter(product => consoleTypes.includes(product.consoleType));
        }

        if (conditionCheckboxes.length) {
          console.log(sortedProducts)
          const conditions = Array.from(conditionCheckboxes).map(checkbox => checkbox.value);
          sortedProducts = sortedProducts.filter(product => conditions.includes(product.condition));
        }

        productsList.innerHTML = '';
        numOfProducts.innerHTML = `Showing ${sortedProducts.length} products`;

        const template = await fetch("/product-card-template", {
          signal
        }).then(res => res.text());

        sortedProducts.forEach(product => {
          productsList.innerHTML += ejs.render(template, {
            product,
            user: window.user ? JSON.parse(window.user) : null
          });
        });
      } catch (error) {
        if (error.name === 'AbortError') {
          console.log('Search aborted');
        } else {
          console.error('Search failed:', error);
        }
      } finally {
        currentSearchController = null;
      }
    }

    function clearFilters() {
      const checkboxes = document.querySelectorAll('input[type="checkbox"]');
      checkboxes.forEach(checkbox => {
        checkbox.checked = false;
      });

      sidebarSearch();
    }

    consoleTypeList.addEventListener('change', sidebarSearch);
    conditionList.addEventListener('change', sidebarSearch);
  </script>
</div>