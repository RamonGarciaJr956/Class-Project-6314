<!DOCTYPE html>
<html lang="en">

<%- include('../partials/head') %>

<body class="bg-gray-50">
  <%- include('../partials/navbar', { user: user }) %>

  <div class="container mx-auto px-4 py-24 min-h-screen">
    <div class="max-w-4xl mx-auto">
      <div class="bg-white rounded-lg shadow-lg overflow-hidden">
        <div class="bg-gray-900 text-white px-6 py-8">
          <div class="flex items-center gap-6">
            <label class="label hover:cursor-pointer w-24 h-24 rounded-full bg-gray-700 flex items-center justify-center" data-toggle="tooltip" title="Avatar">
              <% if (user.image) { %>
              <img id="avatar" src="<%= user.image %>" alt="<%= user.name %>" class="w-full h-full object-cover rounded-full">
              <% } else { %>
              <i class="w-12 h-12 text-gray-400" data-lucide="user"></i>
              <% } %>
              <input type="file" class="sr-only" id="input" name="image" accept="image/*">
            </label>
            <div>
              <h1 class="text-2xl font-bold"><%= user.name %></h1>
              <p class="text-gray-400"><%= user.email %></p>
            </div>
          </div>
        </div>

        <div class="grid md:grid-cols-2 gap-6 p-6">
          <div class="bg-gray-50 p-6 rounded-lg">
            <div class="text-purple-600 mb-4">
              <i class="w-12 h-12" data-lucide="shopping-cart"></i>
            </div>
            <h3 class="text-xl font-bold mb-2">Total Orders</h3>
            <p class="text-3xl font-bold text-purple-600"><%= totalOrders || 0 %></p>
          </div>

          <div class="bg-gray-50 p-6 rounded-lg">
            <div class="text-purple-600 mb-4">
              <i class="w-12 h-12" data-lucide="dollar-sign"></i>
            </div>
            <h3 class="text-xl font-bold mb-2">Total Spent</h3>
            <p class="text-3xl font-bold text-purple-600">
              <%= new Intl.NumberFormat('en-US', { 
                style: 'currency', 
                currency: 'USD' 
              }).format(totalAmountSpent || 0) %>
            </p>
          </div>
        </div>

        <form onsubmit="updateAccountInfo()" class="p-6 border-t border-gray-200">
          <h2 class="text-2xl font-bold mb-6">Account Settings</h2>
          <div>
            <h3 class="font-semibold mb-4">Personal Information</h3>
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Full Name</label>
                <input id="account-name" type="text" value="<%= user.name %>" class="w-full px-3 py-2 border border-gray-300 rounded-lg">
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
                <input id="account-email" type="email" value="<%= user.email %>" class="w-full px-3 py-2 border border-gray-300 rounded-lg">
              </div>
            </div>
          </div>

          <div class="mt-6 flex justify-end space-x-4">
            <button class="bg-gray-200 hover:bg-gray-300 text-gray-900 font-semibold py-2 px-6 rounded-lg transition-all duration-300">
              Cancel
            </button>
            <button class="bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-6 rounded-lg flex items-center group transition-all duration-300">
              <span>Save Changes</span>
              <i class="w-5 h-5 ml-2 transition-transform duration-300 group-hover:translate-x-1" data-lucide="chevron-right"></i>
            </button>
          </div>
        </form>
      </div>
    </div>

    <div id="modal" class="fixed inset-0 z-50 hidden overflow-y-auto">
      <div class="flex min-h-screen items-center justify-center px-4 pt-4 pb-20 text-center">
        <div class="fixed inset-0 transition-opacity" aria-hidden="true">
          <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
        </div>

        <div class="inline-block transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:align-middle">
          <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div class="sm:flex sm:items-start">
              <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
                <h3 class="text-lg font-medium leading-6 text-gray-900" id="modalLabel">
                  Crop the image
                </h3>
                <div class="mt-2">
                  <div class="img-container">
                    <img id="modal-image" src="https://avatars0.githubusercontent.com/u/3456749" class="w-full h-auto object-cover">
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
            <button type="button" id="crop" class="inline-flex w-full justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm">
              Crop
            </button>
            <button onclick="return hideModal()" type="button" id="close-modal" class="mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>

  </div>

  <%- include('../partials/footer') %>

  <style>
    .cropper-view-box,
    .cropper-face {
      border-radius: 50%;
    }

    .cropper-view-box {
      outline: 0;
      box-shadow: 0 0 0 1px #39f;
    }
  </style>

  <script>
    const imageInput = document.getElementById('input');
    const Avatar = document.getElementById('avatar');
    const modalImage = document.getElementById('modal-image');
    const modalContainer = document.querySelector('#modal');
    const cropperButton = document.getElementById('crop');

    function updateAccountInfo() {
      const name = document.getElementById('account-name').value;
      const email = document.getElementById('account-email').value;

      fetch('/api/update-profile', {
          method: 'post',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            name,
            email
          })
        })
        .then(res => {
          if (res.ok) {
            location.reload();
          } else {
            alert('Failed to update account information');
          }
        })
    }

    imageInput.addEventListener('change', function(e) {
      var files = e.target.files;
      var done = function(url) {
        imageInput.value = '';
        modalImage.src = url;
        showModal();
      };
      var reader;
      var file;
      var url;

      if (files && files.length > 0) {
        file = files[0];

        done(URL.createObjectURL(file));
      }
    });

    function showModal() {
      modal.classList.remove('hidden');

      cropper = new Cropper(modalImage, {
        aspectRatio: 1,
        viewMode: 1,
        cropBoxMovable: false,
        cropBoxResizable: false,
        dragMode: "move",
        ready: function() {
          croppable = true;
        },
      });
    }

    function hideModal() {
      modal.classList.add('hidden');

      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
    }

    cropperButton.addEventListener('click', function() {
      const canvas = cropper.getCroppedCanvas({
        width: 160,
        height: 160,
      });

      canvas.toBlob((blob) => {
        const reader = new FileReader();
        reader.onloadend = function() {
          const base64data = reader.result.split(',')[1];

          fetch('/api/upload-avatar', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                image: base64data
              })
            })
            .then(res => {
              if (res.ok) {
                location.reload();
              } else {
                alert('Failed to upload avatar');
              }
            });
        };
        reader.readAsDataURL(blob);
      });
    });

    lucide.createIcons();
  </script>
</body>

</html>